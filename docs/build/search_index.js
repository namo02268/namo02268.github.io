var documenterSearchIndex = {"docs":
[{"location":"bot/#bot開発","page":"bot開発","title":"bot開発","text":"","category":"section"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"GAS (Google Apps Script)、Twitter API、IFTTT を組み合わせて、3Dモデリングのお題出題botを作りました。2019年8月19日から運営を始め、現在1600人ほどフォロワーがいます。後述するお題生成以外は全て自動化しています。","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"<blockquote class=\"twitter-tweet\" data-theme=\"dark\"><p lang=\"ja\" dir=\"ltr\">本日のお題は「ビー玉」です。<br>投稿の際は <a href=\"https://twitter.com/hashtag/%E6%B7%B1%E5%A4%9C%E3%81%AE%E3%83%A2%E3%83%87%E3%83%AA%E3%83%B3%E3%82%B060%E5%88%86%E4%B8%80%E6%9C%AC%E5%8B%9D%E8%B2%A0?src=hash&amp;ref_src=twsrc%5Etfw\">#深夜のモデリング60分一本勝負</a> のハッシュタグをつけていただけると幸いです。</p>&mdash; 深夜の真剣モデリング60分一本勝負 (@1hourmodelling) <a href=\"https://twitter.com/1hourmodelling/status/1498279130105847808?ref_src=twsrc%5Etfw\">February 28, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"","category":"page"},{"location":"bot/#ツイートの自動化","page":"bot開発","title":"ツイートの自動化","text":"","category":"section"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"GAS のトリガーと Twitter API を使って、毎日以下のツイートを自動でツイートしています。","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"21:50 お題発表ツイート\n22:00 モデリング開始ツイート\n23:00 モデリング終了ツイート","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"","category":"page"},{"location":"bot/#作品リツイートの自動化","page":"bot開発","title":"作品リツイートの自動化","text":"","category":"section"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"#深夜のモデリング60分一本勝負 に投稿された作品を30分置きに自動リツイートしています。処理の流れは以下のようになっています。","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"IFTTT でツイートの検索\nGoogleスプレッドシートに該当ツイートを追加\n追加されたツイートを Twitter API を使ってリツイート","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"<img src=\"../images/IFTTT.png\" width=\"500\">","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"","category":"page"},{"location":"bot/#過去のお題","page":"bot開発","title":"過去のお題","text":"","category":"section"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"過去に出題したお題を簡単に確認できるように、毎日のお題を GAS を使ってスプレッドシートに追加しています。また、リツイート数をカウントすることで、投稿作品数の統計も取っています。","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"<img src=\"../images/Spreadsheet1.png\" width=\"300\">","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"過去のお題用スプレッドシートへのリンク","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"","category":"page"},{"location":"bot/#お題の生成","page":"bot開発","title":"お題の生成","text":"","category":"section"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"お題は募集形式を取っています。お題用スプレッドシートを作成し、全体公開にすることで、誰でも自由に入力出来るようになっています。お題は入力された中からランダムに選ばれるため、お題がツイートされるまでその日のお題は分かりません。","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"お題用スプレッドシートへのリンク","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"","category":"page"},{"location":"bot/#追記","page":"bot開発","title":"追記","text":"","category":"section"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"Twitterにおける自動化に関するルールは以下のページに書いてあります。気になる方は読んでみて下さい。","category":"page"},{"location":"bot/","page":"bot開発","title":"bot開発","text":"ツイッターヘルプセンター 自動化ルール","category":"page"},{"location":"PBR/#Physical-Based-Rendering","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"","category":"section"},{"location":"PBR/","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"自作のゲームエンジンにリアルタイムのIBLを実装してみました。","category":"page"},{"location":"PBR/","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"今のところ、GUIによるコンポーネントの追加/削除/編集が出来ます。","category":"page"},{"location":"PBR/#Youtubeデモ動画","page":"Physical Based Rendering","title":"Youtubeデモ動画","text":"","category":"section"},{"location":"PBR/","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"(Image: )","category":"page"},{"location":"PBR/#参考文献","page":"Physical Based Rendering","title":"参考文献","text":"","category":"section"},{"location":"PBR/","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"Real Shading in Unreal Engine 4","category":"page"},{"location":"PBR/","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"Learn OpenGL PBR","category":"page"},{"location":"PBR/","page":"Physical Based Rendering","title":"Physical Based Rendering","text":"基礎からはじめる物理ベースレンダリング","category":"page"},{"location":"WebSite/#Webサイト作成","page":"Webサイト","title":"Webサイト作成","text":"","category":"section"},{"location":"WebSite/","page":"Webサイト","title":"Webサイト","text":"本Webサイトは Julia のパッケージ Documenter.jl を使って作成しています。Documenter.jl とは、Julia 用のドキュメント生成ツールです。Markdown ファイルから本サイトのような HTMLベースのページを生成してくれます。LaTeXの表現形式にも対応しているため、簡単に数式混じりの文章を作成することができます。","category":"page"},{"location":"WebSite/","page":"Webサイト","title":"Webサイト","text":"<img src=\"../images/homepage.png\" width=\"500\">","category":"page"},{"location":"GameEngine/#ゲームエンジン開発","page":"Game Engine","title":"ゲームエンジン開発","text":"","category":"section"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"ECS (Entity Component System) ライクな自作のゲームエンジン開発に挑戦しています。","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"ソースコードへのリンク","category":"page"},{"location":"GameEngine/#開発環境","page":"Game Engine","title":"開発環境","text":"","category":"section"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"使用言語やライブラリは以下の通りです。","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"C++ 14\nOpenGL\nGLFW\nGLAD\nGLM\nDear ImGui\nAssimp","category":"page"},{"location":"GameEngine/#Entityの作成とComponentの追加","page":"Game Engine","title":"Entityの作成とComponentの追加","text":"","category":"section"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"作成したEntityをキーにしてSceneから任意のComponentを追加できます。","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"// Entityの作成\r\nauto entity = scene.createEntity();\r\n// Componentの追加\r\nscene.addComponent<TransformComponent>(entity);\r\nscene.addComponent<MaterialComponent>(entity);","category":"page"},{"location":"GameEngine/#Systemの追加","page":"Game Engine","title":"Systemの追加","text":"","category":"section"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"// レンダラーをSceneに追加\r\nauto renderer = std::make_unique<Renderer>();\r\nscene.addSystem(std::move(renderer));","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"各Systemにはあらかじめ、注目したいComponentを設定しておくことができます。該当するComponentを全て所持するEntityは、自動でSystemのメンバに登録されます。","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"//--------------------システムクラス--------------------//\r\nclass System{\r\n  // 必要コンポーネントのbit配列\r\n  std::bitset<MAX_COMPONENTS_FAMILY>  m_requiredComponent;\r\n};\r\n\r\n//-------------------レンダラークラス-------------------//\r\nclass Renderer : public System {\r\n  // コンストラクタ\r\n  Renderer() {\r\n    // Transform Componentを設定\r\n    auto family = getComponentTypeID<TransformComponent>();\r\n    m_requiredComponent[family] = true; // \r\n    // Mesh Componentを設定\r\n    family = getComponentTypeID<MeshComponent>();\r\n    m_requiredComponent[family] = true;\r\n    // Material Componentを設定\r\n    family = getComponentTypeID<MaterialComponent>();\r\n    m_requiredComponent[family] = true;\r\n  }\r\n};","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"あとはメンバのEntity配列に対して行いたい処理を記述するだけです。","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"//-------------------レンダラークラス-------------------//\r\nclass Renderer : public System {\r\n  // 初期化処理\r\n  void Renderer::init() {\r\n    for (auto& e : m_entityArray) {\r\n    }\r\n  }\r\n  // 更新処理\r\n  void Renderer::update(float dt) {\r\n    for (auto& e : m_entityArray) {\r\n    }\r\n  }\r\n  // 描画処理\r\n  void Renderer::draw() {\r\n    for (auto& e : m_entityArray) {\r\n    }\r\n  }\r\n}","category":"page"},{"location":"GameEngine/#Event-Handler","page":"Game Engine","title":"Event Handler","text":"","category":"section"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"Event Handlerは各System同士がやり取りするための手段です。例えば、","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"//-------------------コリジョンクラス-------------------//\r\nclass CollisionSystem : public System {\r\n  void update(float dt) {\r\n    if(Collision) {\r\n      // イベントを発行\r\n      CollisionEvent event;\r\n      m_eventHandler->publish(&event);\r\n    }\r\n  }\r\n}\r\n\r\n//-------------------レンダラークラス-------------------//\r\nclass Renderer : public System {\r\n  void init() {\r\n    // Event Handlerにメンバ関数を登録\r\n    m_eventHandler->subscribe(this, &Renderer::onCollisionEvent);\r\n  }\r\n\r\n  // イベント受け取り時に呼び出したい関数\r\n  void onCollisionEvent(CollisionEvent* collision) {\r\n  }\r\n};\r\n","category":"page"},{"location":"GameEngine/#参考文献","page":"Game Engine","title":"参考文献","text":"","category":"section"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"古典的ゲームループからECSアーキテクチャまで","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"Nomad Game Engine","category":"page"},{"location":"GameEngine/","page":"Game Engine","title":"Game Engine","text":"Effective Event Handling in C++","category":"page"},{"location":"ArtGallery/#Art-Gallery","page":"Art Gallery","title":"Art Gallery","text":"","category":"section"},{"location":"ArtGallery/","page":"Art Gallery","title":"Art Gallery","text":"趣味で作った3Dアートの一部です。ソフトは主に Blender を使用しています。","category":"page"},{"location":"RoboCup/#ロボカップジュニア","page":"ロボカップジュニア","title":"ロボカップジュニア","text":"","category":"section"},{"location":"RoboCup/","page":"ロボカップジュニア","title":"ロボカップジュニア","text":"小学生～高校生の間、ロボカップジュニアのサッカーリーグに参加していました。","category":"page"},{"location":"#About-Me","page":"About Me","title":"About Me","text":"","category":"section"},{"location":"#中川-基-/-Moto-Nakagawa","page":"About Me","title":"中川 基 / Moto Nakagawa","text":"","category":"section"},{"location":"","page":"About Me","title":"About Me","text":"機械工学を専攻しています。最近はコンピュータグラフィックスの勉強にハマっています。","category":"page"},{"location":"","page":"About Me","title":"About Me","text":"<p>&#x1f393; 茨城大学大学院 理工学研究科 機械システム専攻</p>","category":"page"},{"location":"","page":"About Me","title":"About Me","text":"<p>&#x1f517;  <a href=\"https://github.com/namo02268\">Github</a></p>","category":"page"},{"location":"#My-Projects","page":"About Me","title":"My Projects","text":"","category":"section"},{"location":"","page":"About Me","title":"About Me","text":"    Pages = [\r\n        \"GameEngine.md\",\r\n        \"PBR.md\",\r\n        \"bot.md\",\r\n        \"RoboCup.md\",\r\n        \"MachineLearning.md\",\r\n        \"WebSite.md\",\r\n        \"ArtGallery.md\",\r\n    ]\r\n    Depth = 2","category":"page"},{"location":"MachineLearning/#機械学習","page":"機械学習","title":"機械学習","text":"","category":"section"}]
}
